-- SAKILA DB Practice Questions --

-- ------------------------------------------------------------ --
-- Find the top 5 customers who have spent the most on rentals. --
-- ------------------------------------------------------------ --

SELECT c.first_name, c.last_name, SUM(p.amount) AS rental_spend
FROM customer AS c
JOIN payment AS p
ON c.customer_id = p.customer_id
GROUP BY c.customer_id
ORDER BY rental_spend DESC
LIMIT 5;

-- ------------------------------------------------ --
-- List the films that have not been rented at all. --
-- ------------------------------------------------ --

SELECT f.title
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
LEFT JOIN rental AS r
ON i.inventory_id = r.inventory_id
WHERE r.rental_id IS NULL
GROUP BY f.film_id;

-- -------------------------------------------------------------------------- --
-- Retrieve the names of actors who have appeared in films of every category. --
-- -------------------------------------------------------------------------- --

SELECT a.first_name, a.last_name
FROM actor AS a
JOIN film_actor AS fa
ON a.actor_id = fa.actor_id
JOIN film_category AS fc
ON fa.film_id = fc.film_id
JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY a.actor_id
HAVING COUNT(DISTINCT c.category_id) = 16;

-- ------------------------------------------------------------------------------ --
-- Calculate the total revenue generated by each store (considering rentals only) --
-- ------------------------------------------------------------------------------ --

SELECT s.store_id, SUM(p.amount) AS store_revenue
FROM store AS s
JOIN staff AS st
ON s.store_id = st.store_id
JOIN payment AS p
ON st.staff_id = p.staff_id
GROUP BY s.store_id;

-- ------------------------------------------------- --
-- Find the customers who have not rented any films. --
-- ------------------------------------------------- --

SELECT c.first_name, c.last_name
FROM customer AS c
LEFT JOIN rental AS r
ON c.customer_id = r.customer_id
WHERE r.customer_id IS NULL;

-- ----------------------------------------------------------------------------------------------- --
-- Retrieve the names of customers who have rented the same film multiple times on different days. --
-- ----------------------------------------------------------------------------------------------- --

SELECT DISTINCT c.first_name, c.last_name
FROM customer AS c
JOIN rental AS r1 
ON c.customer_id = r1.customer_id
JOIN rental AS r2 
ON c.customer_id = r2.customer_id
JOIN inventory AS i1 
ON r1.inventory_id = i1.inventory_id
JOIN inventory AS i2 
ON r2.inventory_id = i2.inventory_id
WHERE r1.rental_id <> r2.rental_id
AND r1.customer_id = r2.customer_id
AND i1.film_id = i2.film_id
AND r1.rental_date <> r2.rental_date
ORDER BY c.first_name, c.last_name;

-- ------------------------------------------------------------------------ --
-- List the films that have been rented at least twice within a single day. --
-- ------------------------------------------------------------------------ --

SELECT f.title, r.rental_date, COUNT(r.rental_id) AS rental_count
FROM rental AS r
JOIN inventory AS i 
ON r.inventory_id = i.inventory_id
JOIN film AS f
ON i.film_id = f.film_id
GROUP BY f.title, r.rental_date
HAVING COUNT(r.rental_id) >= 2;

-- -------------------------------------------------------- --
-- Find the average rental rate for each category of films. --
-- -------------------------------------------------------- --

SELECT c.name AS category_name, ROUND(AVG(f.rental_rate),2) AS average_rental_rate
FROM category AS c
JOIN film_category AS fc
ON c.category_id = fc.category_id
JOIN film AS f
ON fc.film_id =f.film_id
GROUP BY c.name
ORDER BY average_rental_rate DESC;

-- ---------------------------------------------------------------------------------- --
-- Retrieve the titles of films that have the same length as at least one other film. --
-- ---------------------------------------------------------------------------------- --

SELECT f1.title AS first_title, f2.title AS second_title, f1.length
FROM film f1
JOIN film f2 
ON f1.length = f2.length 
AND f1.film_id < f2.film_id
ORDER BY f1.length, f1.title, f2.title;

-- -------------------------------------------------------------------------------- --
-- Find the titles and descriptions of all films with the word 'love' in the title. --
-- -------------------------------------------------------------------------------- --

SELECT f.title, f.description
FROM film AS f
WHERE f.title LIKE '%love%';

-- ------------------------------------------------------------------- --
-- Get the list of films that are rented by customers from 'La Paz'. --
-- ------------------------------------------------------------------- --

SELECT DISTINCT f.title 
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
JOIN rental AS r
ON i.inventory_id = r.inventory_id
JOIN customer AS cus
ON r.customer_id = cus.customer_id
JOIN address AS a
ON cus.address_id = a.address_id
JOIN city AS c
ON a.city_id = c.city_id
WHERE c.city = 'La Paz';

-- ------------------------------------------------------------------------------------------------------------- --
-- Get the list of films that have been rented in the last month along with the customer names and rental dates. --
-- ------------------------------------------------------------------------------------------------------------- --

SELECT f.title, c.first_name, c.last_name, r.rental_date
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
JOIN rental AS r
ON i.inventory_id = r.inventory_id
JOIN customer AS c
ON r.customer_id =  c.customer_id
WHERE TIMESTAMPDIFF(MONTH,r.rental_date,r.last_update) < 1;